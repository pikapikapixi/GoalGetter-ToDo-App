"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainRouter = void 0;
const provider_1 = require("./utils/decorators/provider");
const proxy_router_1 = require("./api/proxy/proxy.router");
const mock_router_1 = require("./api/mock/mock.router");
const health_router_1 = require("./api/health/health.router");
let MainRouter = class MainRouter {
    constructor(proxyRouter, mockRouter, healthRouter) {
        this.proxyRouter = proxyRouter;
        this.mockRouter = mockRouter;
        this.healthRouter = healthRouter;
    }
    async getRoutes() {
        const routes = await Promise.all([
            this.proxyRouter.getRoutes(),
            this.mockRouter.getRoutes(),
            this.healthRouter.getRoutes(),
        ]);
        return routes.flat();
    }
};
MainRouter = __decorate([
    provider_1.Provider(),
    __metadata("design:paramtypes", [proxy_router_1.ProxyRouter,
        mock_router_1.MockRouter,
        health_router_1.HealthRouter])
], MainRouter);
exports.MainRouter = MainRouter;
//# sourceMappingURL=main.router.js.map