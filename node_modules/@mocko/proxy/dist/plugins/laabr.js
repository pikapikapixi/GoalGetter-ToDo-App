"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaabrPlugin = void 0;
const laabr = require("laabr");
const config_service_1 = require("../config/config.service");
const provider_1 = require("../utils/decorators/provider");
let LaabrPlugin = class LaabrPlugin {
    constructor(config) {
        this.config = config;
        this.plugin = laabr;
        this.options = {
            formats: {
                response: this.config.get('SERVER_LOG-FORMAT'),
                onPostStart: '\0',
                onPostStop: '\0',
            }
        };
    }
};
LaabrPlugin = __decorate([
    provider_1.Provider(),
    __metadata("design:paramtypes", [config_service_1.ConfigProvider])
], LaabrPlugin);
exports.LaabrPlugin = LaabrPlugin;
//# sourceMappingURL=laabr.js.map