"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisProvider = void 0;
const provider_1 = require("../utils/decorators/provider");
const config_service_1 = require("../config/config.service");
const Redis = require("ioredis");
let RedisProvider = class RedisProvider {
    constructor(config) {
        this.config = config;
        this.REDIS_ENABLED = config.getBoolean('REDIS_ENABLED');
        if (this.REDIS_ENABLED) {
            this.REDIS_PREFIX = config.get('REDIS_PREFIX');
            this.connector = new Redis(this.config.getRedisConfig());
            this.listener = new Redis(this.config.getRedisConfig());
        }
    }
    get isEnabled() {
        return this.REDIS_ENABLED;
    }
    async get(key) {
        const str = await this.connector.get(key);
        return JSON.parse(str);
    }
    async set(key, value, ttlMillis) {
        const str = JSON.stringify(value);
        if (ttlMillis) {
            await this.connector.set(key, str, 'PX', ttlMillis);
        }
        else {
            await this.connector.set(key, str);
        }
    }
    async registerListener(listener, server) {
        if (!this.isEnabled) {
            return;
        }
        await this.listener.subscribe(this.REDIS_PREFIX + listener.channel);
        this.listener.on('message', (channel, message) => {
            if (channel !== this.REDIS_PREFIX + listener.channel) {
                return;
            }
            listener.onMessage(message, server);
        });
    }
    async ping() {
        return await this.connector.ping();
    }
};
RedisProvider = __decorate([
    provider_1.Provider(),
    __metadata("design:paramtypes", [config_service_1.ConfigProvider])
], RedisProvider);
exports.RedisProvider = RedisProvider;
//# sourceMappingURL=redis.provider.js.map