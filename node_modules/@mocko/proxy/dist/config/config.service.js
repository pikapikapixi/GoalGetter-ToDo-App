"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configProvider = exports.ConfigProvider = void 0;
const dotenv = require("dotenv");
const fs = require("fs");
const config_constants_1 = require("./config.constants");
const provider_1 = require("../utils/decorators/provider");
let ConfigProvider = class ConfigProvider {
    constructor(configPath, defaultConfigPath) {
        this.assertConfig(configPath, defaultConfigPath);
        this.config = { ...this.fromFile(configPath), ...process.env };
    }
    get(key) {
        const value = this.getOptional(key);
        if (typeof value === 'undefined') {
            throw new Error(`Missing ${key} config`);
        }
        return value;
    }
    getNumber(key) {
        const value = Number(this.get(key));
        if (isNaN(value)) {
            throw new TypeError(`The config ${key} isn't a number`);
        }
        return value;
    }
    getBoolean(key) {
        return this.get(key).toLowerCase() === 'true';
    }
    getRedisConfig() {
        return {
            port: this.getNumber('REDIS_PORT'),
            host: this.get('REDIS_HOST'),
            password: this.get('REDIS_PASSWORD'),
            db: this.getNumber('REDIS_DATABASE'),
            keyPrefix: this.get('REDIS_PREFIX'),
        };
    }
    getOptional(key) {
        return this.config[key];
    }
    fromFile(path) {
        return dotenv.parse(fs.readFileSync(path));
    }
    assertConfig(configPath, defaultConfigPath) {
        if (fs.existsSync(configPath)) {
            return;
        }
        fs.copyFileSync(defaultConfigPath, configPath);
    }
};
ConfigProvider = __decorate([
    provider_1.Provider(),
    __metadata("design:paramtypes", [String, String])
], ConfigProvider);
exports.ConfigProvider = ConfigProvider;
exports.configProvider = new ConfigProvider(config_constants_1.CONFIG_PATH, config_constants_1.DEFAULT_CONFIG_PATH);
//# sourceMappingURL=config.service.js.map