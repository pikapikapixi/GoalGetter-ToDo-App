"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const provider_1 = require("./utils/decorators/provider");
const logger_1 = require("./utils/logger");
const inversify_1 = require("inversify");
const config_service_1 = require("./config/config.service");
const Hapi = require("@hapi/hapi");
const main_router_1 = require("./main.router");
const plugins_1 = require("./plugins");
const listeners_1 = require("./listeners");
const redis_provider_1 = require("./redis/redis.provider");
let Server = class Server {
    constructor(logger, config, router, pluginProvider, listenerProvider, redisProvider) {
        this.logger = logger;
        this.config = config;
        this.router = router;
        this.pluginProvider = pluginProvider;
        this.listenerProvider = listenerProvider;
        this.redisProvider = redisProvider;
    }
    async start() {
        this.logger.info('Registering listeners');
        const listenerRegistrationTasks = this.listenerProvider.listeners
            .map(l => this.redisProvider.registerListener(l, this));
        await Promise.all(listenerRegistrationTasks);
        return await this.startServer();
    }
    async stop() {
        this.logger.info('Stopping the server');
        await this.app.stop();
        this.logger.info('Bye :)');
        process.exit(0);
    }
    async restart() {
        this.logger.info('Restarting the server');
        await this.app.stop();
        return await this.startServer();
    }
    async startServer() {
        this.logger.info('Creating the server');
        this.app = new Hapi.Server({
            host: this.config.get('SERVER_HOST'),
            port: this.config.getNumber('SERVER_PORT'),
            routes: {
                cors: this.config.getBoolean('SERVER_ALLOW-CORS'),
            }
        });
        this.logger.info('Mapping routes');
        const routes = await this.router.getRoutes();
        routes.forEach(route => this.registerRoute(route));
        this.logger.info('Registering plugins');
        const pluginRegistrationTasks = this.pluginProvider.plugins
            .map(plugin => this.app.register(plugin));
        await Promise.all(pluginRegistrationTasks);
        this.logger.info('Starting the server');
        await this.app.start();
        this.logger.info('Server is running on ' + this.app.info.uri);
        return this;
    }
    registerRoute(route) {
        try {
            this.logger.info(`Mapping '${route.method} ${route.path}'`);
            this.app.route(route);
        }
        catch (e) {
            this.logger.warn(`Failed to map '${route.method} ${route.path}': ${e.message}`);
        }
    }
};
Server = __decorate([
    provider_1.Provider(),
    __param(0, inversify_1.inject(logger_1.Logger)),
    __metadata("design:paramtypes", [Object, config_service_1.ConfigProvider,
        main_router_1.MainRouter,
        plugins_1.PluginProvider,
        listeners_1.ListenerProvider,
        redis_provider_1.RedisProvider])
], Server);
exports.Server = Server;
//# sourceMappingURL=server.js.map